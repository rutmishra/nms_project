services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    env_file: 
      - .env
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nms_network
    environment:
      - POSTGRES_DB=nms_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD='@U9#5o!4.'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: nms_backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres_db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=nms_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD='@U9#5o!4.'
      - DATABASE_URL=postgresql://postgres:'@U9#5o!4.'@postgres_db:5432/nms_db
    ports:
      - "8001:8000"
    networks:
      - nms_network
    volumes:
      - ./backend:/app
      - ./wait-for-it.sh:/wait-for-it.sh
      - ./entrypoint.sh:/entrypoint.sh
    env_file: 
      - .env
    command: ["/entrypoint.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/status/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build: ./frontend
    container_name: nms_frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "8501:8501"
    networks:
      - nms_network
    volumes:
      - ./frontend:/app
    environment:
      - BACKEND_URL=http://backend:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    ports:
      - "6380:6379"
    networks:
      - nms_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:

networks:
  nms_network:
    name: nms_network
    driver: bridge
